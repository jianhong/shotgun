/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }

    withName: KNEADDATA {
        ext.args   = '--cat-final-output --reorder --run-trf'
        publishDir = [
            path: { "${params.outdir}/kneaddata/fastqsBySample" },
            mode: 'copy',
            saveAs: { filename -> filename.contains('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: KNEADDATA_COUNT {
        publishDir = [
            path: { "${params.outdir}/kneaddata/countsBySample" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: KNEADDATA_MERGECOUNT {
        publishDir = [
            path: { "${params.outdir}/kneaddata" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

/*
    withName: TRIMMOMATIC { //used by modified_kneaddata, adapter==params.trimmomatic_adapter
        ext.args   = { "ILLUMINACLIP:${adapter}:2:30:10:8:TRUE SLIDINGWINDOW:4:20 MINLEN:50" }
        publishDir = [
            path: { "${params.outdir}/kneaddata/trimmomatic" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: SEQTK_SEQ { //used by modified_kneaddata
        ext.args   = '-a'
        publishDir = [
            path: { "${params.outdir}/kneaddata/fa" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: TRF { //used by modified_kneaddata
        ext.args   = '2 7 7 80 10 50 500 -h -ngs'
        publishDir = [
            path: { "${params.outdir}/kneaddata/tandem" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: SEQTK_SUBSEQ { //used by modified_kneaddata
        publishDir = [
            path: { "${params.outdir}/kneaddata/tandem" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
*/

    withName: METAPHLAN_INSTALL {
        publishDir = [
            path: { "${params.outdir}/metaphlan/metaphlan_db" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: METAPHLAN_RUN {
        ext.args   = '--input_type fastq'
        publishDir = [
            path: { "${params.outdir}/metaphlan/bySamples" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: METAPHLAN_MERGE {
        ext.args   = '--input_type fastq'
        publishDir = [
            path: { "${params.outdir}/metaphlan" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: KAIJU_RUN {
        ext.args   = '-v'
        publishDir = [
            path: { "${params.outdir}/kaiju/bySamples" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: KAIJU2TABLE {
        ext.args   = '-r species -l superkingdom,phylum,class,order,family,genus,species'
        publishDir = [
            path: { "${params.outdir}/kaiju" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: KRONA {
        publishDir = [
            path: { "${params.outdir}/kaiju/kronaBySamples" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: UNTAR_KRAKEN {
        ext.args2  = '--strip-components=1'
        ext.prefix = 'KRAKEN2_DB'
        publishDir = [
            path: { "${params.outdir}/kraken2" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: KRAKEN2_INSTALL {
        // to build with addition of fungi,
        // please set the ext.args to 'archaea bacteria viral human fungi UniVec_Core'
        // available library types are: "archaea", "bacteria", "plasmid",
        //                     "viral", "human", "fungi", "plant", "protozoa",
        //                     "nr", "nt", "UniVec", "UniVec_Core"
        // otherwise, please supply the prebuild-database by parameter --kraken2_db path/to/your/KRAKEN2_DB
        ext.args   = '--standard'
        publishDir = [
            path: { "${params.outdir}/kraken2" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: KRAKEN2_RUN {
        ext.args   = '--use-names'
        publishDir = [
            path: { "${params.outdir}/kraken2" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: KRAKEN2_MERGE {
        publishDir = [
            path: { "${params.outdir}/kraken2/merge" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: KRONA_KRAKEN2 {
        publishDir = [
            path: { "${params.outdir}/kraken2/krona" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: BRACKEN {
        publishDir = [
            path: { "${params.outdir}/kraken2/bracken" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: HUMANN_INSTALL_NUCLEOTIDE {
        ext.args   = '--download chocophlan full'
        ext.prefix = 'CHOCOPHLAN_DB'
        publishDir = [
            path: { "${params.outdir}/humann" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: HUMANN_INSTALL_PROTEIN {
        ext.args   = '--download uniref uniref50_diamond'
        ext.prefix = 'UNIREF50_DB'
        publishDir = [
            path: { "${params.outdir}/humann" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: HUMANN_RUN {
        publishDir = [
            path: { "${params.outdir}/humann" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: HUMANN_GROUP {
        ext.args   = '--group uniref50_rxn'
        ext.prefix = { "regroup_${meta.id}_genefamilies.tsv" }
        publishDir = [
            path: { "${params.outdir}/humann/regroup" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: NORM_GENE {
        ext.prefix = { "normalized_${meta.id}_genefamilies.tsv" }
        publishDir = [
            path: { "${params.outdir}/humann/normalized" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: NORM_COVG {
        ext.prefix = { "normalized_${meta.id}_pathcoverage.tsv" }
        publishDir = [
            path: { "${params.outdir}/humann/normalized" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: NORM_ABUN {
        ext.prefix = { "normalized_${meta.id}_pathabundance.tsv" }
        publishDir = [
            path: { "${params.outdir}/humann/normalized" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: JOIN_GENE {
        ext.prefix = { "humann_${meta.id}_genefamilies.tsv" }
        publishDir = [
            path: { "${params.outdir}/humann/join" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: JOIN_COVG {
        ext.prefix = { "humann_${meta.id}_pathcoverage.tsv" }
        publishDir = [
            path: { "${params.outdir}/humann/join" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: JOIN_ABUN {
        ext.prefix = { "humann_${meta.id}_pathabundance.tsv" }
        publishDir = [
            path: { "${params.outdir}/humann/join" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: PLOT_GENE {
        ext.prefix = { "${meta.id}_genefamilies" }
        publishDir = [
            path: { "${params.outdir}/humann/barplot" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: PLOT_COVG {
        ext.prefix = { "${meta.id}_pathcoverage" }
        publishDir = [
            path: { "${params.outdir}/humann/barplot" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: PLOT_ABUN {
        ext.prefix = { "${meta.id}_pathabundance" }
        publishDir = [
            path: { "${params.outdir}/humann/barplot" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: MOTUS_INSTALL {
        publishDir = [
            path: { "${params.outdir}/motus" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: MOTUS_RUN {
        publishDir = [
            path: { "${params.outdir}/motus" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: MOTUS_MERGE {
        publishDir = [
            path: { "${params.outdir}/motus" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: UNTAR_MOTU {
        ext.prefix = 'db_mOTU'
        publishDir = [
            path: { "${params.outdir}/motus" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
}
